/// <reference types="node" />
import * as webpack from "webpack";
interface ResolvablePromise<T> extends Promise<T> {
    resolve(value: T): void;
}
declare module "webpack" {
    interface Compiler {
        watchMode?: boolean;
        watching?: webpack.Watching;
        markoPluginOptions?: MarkoWebpackPlugin["options"] & {
            markoCompileCache?: Map<unknown, unknown>;
            markoVirtualSources?: Map<string, {
                code: string | Buffer;
                map?: any;
            }>;
        };
        markoAssetsPending?: ResolvablePromise<void>;
        markoAssetsRead?: boolean;
        markoEntriesPending?: ResolvablePromise<void>;
        markoEntriesRead?: boolean;
    }
}
export default class MarkoWebpackPlugin {
    private serverCompiler;
    private browserCompilers;
    private clientEntries;
    private clientAssets;
    private options;
    constructor(options?: {
        runtimeId?: string;
    });
    get server(): (compiler: webpack.Compiler) => void;
    get browser(): (compiler: webpack.Compiler) => void;
}
export {};
