"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");exports.__esModule = true;exports.exit = exit;var _babelUtils = require("@marko/babel-utils");
var _compiler = require("@marko/compiler");

var _withPreviousLocation = _interopRequireDefault(require("../../../util/with-previous-location"));

function exit(path) {
  const { node } = path;
  const { attributes, body } = node;
  if (attributes.length === 0) {
    (0, _babelUtils.diagnosticError)(path, {
      label: "The 'macro' tag must have a 'name' attribute."
    });
    path.remove();
    return;
  }

  if (attributes.length > 1) {
    (0, _babelUtils.diagnosticError)(path, {
      label: "The 'macro' tag can only have a 'name' attribute."
    });
    path.remove();
    return;
  }

  const [nameAttr] = attributes;
  if (!_compiler.types.isStringLiteral(nameAttr.value)) {
    (0, _babelUtils.diagnosticError)(path, {
      label: "The 'name' attribute for 'macro' tags must be a string literal.",
      loc: nameAttr.loc || node.loc || undefined
    });
    path.remove();
    return;
  }

  path.replaceWith(
    (0, _withPreviousLocation.default)(
      _compiler.types.functionDeclaration(
        (0, _babelUtils.getMacroIdentifierForName)(path, nameAttr.value.value),
        [_compiler.types.identifier("out"), ...body.params],
        _compiler.types.blockStatement(body.body)
      ),
      node
    )
  );
}