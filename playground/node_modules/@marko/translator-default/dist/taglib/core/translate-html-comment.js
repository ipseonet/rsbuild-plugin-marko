"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");exports.__esModule = true;exports.enter = enter;var _babelUtils = require("@marko/babel-utils");




var _compiler = require("@marko/compiler");

var _htmlOutWrite = _interopRequireDefault(require("../../util/html-out-write"));
var _vdomOutWrite = _interopRequireDefault(require("../../util/vdom-out-write"));
var _withPreviousLocation = _interopRequireDefault(require("../../util/with-previous-location"));

function enter(path) {
  (0, _babelUtils.assertNoArgs)(path);
  (0, _babelUtils.assertNoParams)(path);
  (0, _babelUtils.assertNoAttributes)(path);

  if (path.hub.file.markoOpts.output === "html") {
    path.replaceWithMultiple([
    (0, _htmlOutWrite.default)`<!--`,
    ...path.node.body.body,
    (0, _htmlOutWrite.default)`-->`]
    );
  } else {
    const templateQuasis = [];
    const templateExpressions = [];
    let currentQuasi = "";
    for (const child of path.node.body.body) {
      if (_compiler.types.isMarkoText(child)) {
        currentQuasi += child.value;
      } else if (_compiler.types.isMarkoPlaceholder(child)) {
        templateQuasis.push(_compiler.types.templateElement({ raw: currentQuasi }));
        templateExpressions.push(child.value);
        currentQuasi = "";
      }
    }

    let value;
    if (templateExpressions.length === 0) {
      value = _compiler.types.stringLiteral(currentQuasi);
    } else {
      templateQuasis.push(_compiler.types.templateElement({ raw: currentQuasi }));
      value = _compiler.types.templateLiteral(templateQuasis, templateExpressions);
    }

    path.replaceWith(
      (0, _withPreviousLocation.default)(
        (0, _vdomOutWrite.default)("comment", value, path.hub.file._componentInstanceIdentifier),
        path.node
      )
    );
  }
}