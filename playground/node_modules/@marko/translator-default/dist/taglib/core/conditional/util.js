"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");exports.__esModule = true;exports.buildIfStatement = buildIfStatement;var _compiler = require("@marko/compiler");

var _withPreviousLocation = _interopRequireDefault(require("../../../util/with-previous-location"));

function buildIfStatement(path, args) {
  if (!args || !args.length) {
    const name = path.get("name");
    throw name.buildCodeFrameError(
      `Invalid '<${name.node.value}>' tag, expected arguments like '<${name.node.value}(test)>'.`
    );
  }

  const ifStatement = _compiler.types.ifStatement(
    args.length === 1 ? args[0] : _compiler.types.sequenceExpression(args),
    _compiler.types.blockStatement(path.node.body.body)
  );

  let nextPath = path.getNextSibling();

  while (
  nextPath.isMarkoComment() ||
  nextPath.isMarkoText() && /^\s*$/.test(nextPath.node.value))
  {
    const ignorePath = nextPath;
    nextPath = nextPath.getNextSibling();
    ignorePath.remove();
  }

  // Provide the if statement to the next part of the if chain.
  if (nextPath.isMarkoTag()) {
    const nextTagName = nextPath.get("name");
    if (
    nextTagName.isStringLiteral({ value: "else" }) ||
    nextTagName.isStringLiteral({ value: "else-if" }))
    {
      nextPath.node.ifStatement = ifStatement;
    }
  }

  return (0, _withPreviousLocation.default)(ifStatement, path.node);
}