"use strict";exports.__esModule = true;exports.default = void 0;var _babelUtils = require("@marko/babel-utils");
var _compiler = require("@marko/compiler");
const EMPTY_OBJECT = {};var _default = exports.default =

{
  enter(tag) {
    tag.node.isPreserved = true;
  },
  exit(tag, attr, _, opts = EMPTY_OBJECT) {
    attr.remove();
    const { node } = tag;
    const replacement = _compiler.types.markoTag(
      _compiler.types.stringLiteral("_preserve"),
      [],
      opts.bodyOnly ? node.body : _compiler.types.markoTagBody([node])
    );

    if ((0, _babelUtils.isNativeTag)(tag)) {
      replacement.key = node.key;
      replacement.attributes.push(
        _compiler.types.markoAttribute("n", _compiler.types.booleanLiteral(true))
      );

      if (opts.bodyOnly) {
        replacement.attributes.push(
          _compiler.types.markoAttribute("b", _compiler.types.booleanLiteral(true))
        );
      }
    } else {
      replacement.key = (0, _babelUtils.normalizeTemplateString)`p_${node.key}`;
    }

    replacement.isPreserved = true;

    if (opts.if) {
      replacement.attributes.push(_compiler.types.markoAttribute("i", opts.if));
    }

    if (opts.bodyOnly) {
      tag.set("body", _compiler.types.markoTagBody([replacement]));
    } else {
      tag.replaceWith(replacement);
    }
  }
};