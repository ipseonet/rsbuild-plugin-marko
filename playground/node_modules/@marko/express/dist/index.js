"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  default: () => middleware
});
module.exports = __toCommonJS(src_exports);

// src/redirect.ts
var import_http = require("http");
var kCSPNonce = Symbol("cspNonce");
var kOnWriteFlush = Symbol("on-flush");
function redirectWithMidstreamSupport(p1, p2) {
  var _a;
  const status = typeof p1 === "number" ? p1 : 302;
  const redirectUrl = typeof p1 === "string" ? p1 : p2;
  const nonce = this[kCSPNonce] ? ` nonce=${JSON.stringify(this[kCSPNonce])}` : "";
  if (this.headersSent && ((_a = this.getHeader("Content-Type")) == null ? void 0 : _a.startsWith("text/html"))) {
    this[kOnWriteFlush] = this.destroy;
    this.write(`
        <meta http-equiv=refresh content=${JSON.stringify(`0;url=${redirectUrl}`)}>
        <script${nonce}>location.href=${JSON.stringify(redirectUrl)}<\/script>
      `);
    if (this.flush)
      this.flush();
    this.write = noopTrue;
    this.flush = this.end = noopThis;
  } else {
    Object.getPrototypeOf(this).redirect.call(this, status, redirectUrl);
  }
}
function noopThis() {
  return this;
}
function noopTrue() {
  return true;
}
var _write = import_http.ServerResponse.prototype.write;
import_http.ServerResponse.prototype.write = function(data, encoding, callback) {
  if (!this[kOnWriteFlush])
    return _write.call(this, data, encoding, callback);
  if (typeof encoding === "function") {
    callback = encoding;
    encoding = "utf8";
  }
  return _write.call(this, data, encoding, () => {
    this[kOnWriteFlush]();
    callback == null ? void 0 : callback();
  });
};

// src/index.ts
function middleware() {
  return (_req, res, next) => {
    res.marko = renderMarkoTemplate;
    res.redirect = redirectWithMidstreamSupport;
    next();
  };
}
function renderMarkoTemplate(template, input) {
  const $global = { ...this.app.locals, ...this.locals };
  if (input) {
    if (input.$global) {
      Object.assign($global, input.$global);
    }
    input.$global = $global;
  }
  this[kCSPNonce] = $global.cspNonce;
  this.set("Content-Type", "text/html; charset=utf-8");
  template.render(input || { $global }, this).on("error", this.req.next);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
//# sourceMappingURL=index.js.map
