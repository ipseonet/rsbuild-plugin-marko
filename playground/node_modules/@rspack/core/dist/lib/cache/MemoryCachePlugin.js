"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Cache_1 = require("../Cache");
class MemoryCachePlugin {
    apply(compiler) {
        const cache = new Map();
        compiler.cache.hooks.store.tap({ name: MemoryCachePlugin.PLUGIN_NAME, stage: Cache_1.Cache.STAGE_MEMORY }, (identifier, etag, data) => {
            const dataEtag = typeof etag?.toString === "function"
                ? etag.toString()
                : etag;
            cache.set(identifier, { etag: dataEtag, data });
        });
        compiler.cache.hooks.get.tap({ name: MemoryCachePlugin.PLUGIN_NAME, stage: Cache_1.Cache.STAGE_MEMORY }, (identifier, etag, gotHandlers) => {
            const cacheEntry = cache.get(identifier);
            const dataEtag = typeof etag?.toString === "function"
                ? etag.toString()
                : etag;
            if (cacheEntry === null) {
                return null;
            }
            if (cacheEntry !== undefined) {
                return cacheEntry.etag === dataEtag ? cacheEntry.data : null;
            }
            gotHandlers.push((result, callback) => {
                if (result === undefined) {
                    cache.set(identifier, null);
                }
                else {
                    cache.set(identifier, { etag: dataEtag, data: result });
                }
                return callback(null);
            });
        });
        compiler.cache.hooks.shutdown.tap({ name: MemoryCachePlugin.PLUGIN_NAME, stage: Cache_1.Cache.STAGE_MEMORY }, () => {
            cache.clear();
        });
    }
}
MemoryCachePlugin.PLUGIN_NAME = "MemoryCachePlugin";
exports.default = MemoryCachePlugin;
