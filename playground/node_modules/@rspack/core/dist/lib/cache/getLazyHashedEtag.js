"use strict";
/**
 * The following code is modified based on
 * https://github.com/webpack/webpack/blob/4b4ca3b/lib/cache/getLazyHashedEtag.js
 *
 * MIT Licensed
 * Author Tobias Koppers @sokra
 * Copyright (c) JS Foundation and other contributors
 * https://github.com/webpack/webpack/blob/main/LICENSE
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getter = void 0;
const createHash_1 = require("../../util/createHash");
class LazyHashedEtag {
    /**
     * @param obj object with updateHash method
     * @param hashFunction the hash function to use
     */
    constructor(obj, hashFunction = "md4") {
        this._obj = obj;
        this._hash = undefined;
        this._hashFunction = hashFunction;
    }
    /**
     * @returns hash of object
     */
    toString() {
        if (this._hash === undefined) {
            const hash = (0, createHash_1.createHash)(this._hashFunction);
            this._obj.updateHash(hash);
            this._hash = hash.digest("base64");
        }
        return this._hash;
    }
}
const mapStrings = new Map();
const mapObjects = new WeakMap();
/**
 * @param obj object with updateHash method
 * @param ashFunction the hash function to use
 * @returns etag
 */
const getter = (obj, hashFunction = "md4") => {
    let innerMap;
    if (typeof hashFunction === "string") {
        innerMap = mapStrings.get(hashFunction);
        if (innerMap === undefined) {
            const newHash = new LazyHashedEtag(obj, hashFunction);
            innerMap = new WeakMap();
            innerMap.set(obj, newHash);
            mapStrings.set(hashFunction, innerMap);
            return newHash;
        }
    }
    else {
        innerMap = mapObjects.get(hashFunction);
        if (innerMap === undefined) {
            const newHash = new LazyHashedEtag(obj, hashFunction);
            innerMap = new WeakMap();
            innerMap.set(obj, newHash);
            mapObjects.set(hashFunction, innerMap);
            return newHash;
        }
    }
    const hash = innerMap.get(obj);
    if (hash !== undefined)
        return hash;
    const newHash = new LazyHashedEtag(obj, hashFunction);
    innerMap.set(obj, newHash);
    return newHash;
};
exports.getter = getter;
exports.default = exports.getter;
