"use strict";
/**
 * The following code is modified based on
 * https://github.com/webpack/webpack/blob/4b4ca3b/lib/HookWebpackError.js
 *
 * MIT Licensed
 * Author Tobias Koppers @sokra
 * Copyright (c) JS Foundation and other contributors
 * https://github.com/webpack/webpack/blob/main/LICENSE
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tryRunOrWebpackError = exports.makeWebpackErrorCallback = exports.makeWebpackError = exports.HookWebpackError = void 0;
const WebpackError_1 = __importDefault(require("./WebpackError"));
class HookWebpackError extends WebpackError_1.default {
    /**
     * Creates an instance of HookWebpackError.
     * @param error inner error
     * @param hook name of hook
     */
    constructor(error, hook) {
        super(error.message);
        this.name = "HookWebpackError";
        this.hook = hook;
        this.error = error;
        this.hideStack = true;
        this.details = `caused by plugins in ${hook}\n${error.stack}`;
        this.stack += `\n-- inner error --\n${error.stack}`;
    }
}
exports.HookWebpackError = HookWebpackError;
exports.default = HookWebpackError;
/**
 * @param error an error
 * @param hook name of the hook
 * @returns a webpack error
 */
const makeWebpackError = (error, hook) => {
    if (error instanceof WebpackError_1.default)
        return error;
    return new HookWebpackError(error, hook);
};
exports.makeWebpackError = makeWebpackError;
/**
 * @param callback webpack error callback
 * @param hook name of hook
 * @returns generic callback
 */
const makeWebpackErrorCallback = (callback, hook) => {
    return (err, result) => {
        if (err) {
            if (err instanceof WebpackError_1.default) {
                callback(err);
                return;
            }
            callback(new HookWebpackError(err, hook));
            return;
        }
        callback(null, result);
    };
};
exports.makeWebpackErrorCallback = makeWebpackErrorCallback;
/**
 * @param fn function which will be wrapping in try catch
 * @param hook name of hook
 * @returns the result
 */
const tryRunOrWebpackError = (fn, hook) => {
    let r;
    try {
        r = fn();
    }
    catch (err) {
        if (err instanceof WebpackError_1.default) {
            throw err;
        }
        throw new HookWebpackError(err, hook);
    }
    return r;
};
exports.tryRunOrWebpackError = tryRunOrWebpackError;
