"use strict";
/**
 * The following code is modified based on
 * https://github.com/webpack/webpack/blob/4b4ca3b/lib/EnvironmentPlugin.js
 *
 * MIT Licensed
 * Author Tobias Koppers @sokra
 * Copyright (c) JS Foundation and other contributors
 * https://github.com/webpack/webpack/blob/main/LICENSE
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnvironmentPlugin = void 0;
const builtin_plugin_1 = require("../builtin-plugin");
const WebpackError_1 = __importDefault(require("./WebpackError"));
class EnvironmentPlugin {
    constructor(...keys) {
        if (keys.length === 1 && Array.isArray(keys[0])) {
            this.keys = keys[0];
            this.defaultValues = {};
        }
        else if (keys.length === 1 && keys[0] && typeof keys[0] === "object") {
            this.keys = Object.keys(keys[0]);
            this.defaultValues = keys[0];
        }
        else {
            this.keys = keys;
            this.defaultValues = {};
        }
    }
    /**
     * Apply the plugin
     * @param compiler the compiler instance
     * @returns
     */
    apply(compiler) {
        const definitions = {};
        for (const key of this.keys) {
            const value = process.env[key] !== undefined
                ? process.env[key]
                : this.defaultValues[key];
            if (value === undefined) {
                compiler.hooks.thisCompilation.tap("EnvironmentPlugin", compilation => {
                    const error = new WebpackError_1.default(`EnvironmentPlugin - ${key} environment variable is undefined.\n\nYou can pass an object with default values to suppress this warning.\nSee https://rspack.dev/plugins/webpack/environment-plugin for example.`);
                    error.name = "EnvVariableNotDefinedError";
                    compilation.errors.push(error);
                });
            }
            definitions[`process.env.${key}`] =
                value === undefined ? "undefined" : JSON.stringify(value);
        }
        new builtin_plugin_1.DefinePlugin(definitions).apply(compiler);
    }
}
exports.EnvironmentPlugin = EnvironmentPlugin;
