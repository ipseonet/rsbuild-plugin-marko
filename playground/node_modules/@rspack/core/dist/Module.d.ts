import type { JsCodegenerationResult, JsContextModuleFactoryAfterResolveData, JsContextModuleFactoryBeforeResolveData, JsCreateData, JsFactoryMeta, JsModule, ModuleDTO } from "@rspack/binding";
import type { Source } from "../compiled/webpack-sources";
import type { Compilation } from "./Compilation";
import { DependenciesBlock } from "./DependenciesBlock";
import { Dependency } from "./Dependency";
export type ResourceData = {
    resource: string;
    path: string;
    query?: string;
    fragment?: string;
};
export type ResourceDataWithData = ResourceData & {
    data?: Record<string, any>;
};
export type CreateData = Partial<JsCreateData>;
export type ContextInfo = {
    issuer: string;
};
export type ResolveData = {
    contextInfo: ContextInfo;
    context: string;
    request: string;
    fileDependencies: string[];
    missingDependencies: string[];
    contextDependencies: string[];
    createData?: CreateData;
};
export declare class ContextModuleFactoryBeforeResolveData {
    #private;
    context: string;
    request: string;
    regExp: RegExp | undefined;
    recursive: boolean;
    static __from_binding(binding: JsContextModuleFactoryBeforeResolveData): ContextModuleFactoryBeforeResolveData;
    static __to_binding(data: ContextModuleFactoryBeforeResolveData): JsContextModuleFactoryBeforeResolveData;
    private constructor();
}
export type ContextModuleFactoryBeforeResolveResult = false | ContextModuleFactoryBeforeResolveData;
export declare class ContextModuleFactoryAfterResolveData {
    #private;
    resource: number;
    context: string;
    request: string;
    regExp: RegExp | undefined;
    recursive: boolean;
    readonly dependencies: Dependency[];
    static __from_binding(binding: JsContextModuleFactoryAfterResolveData): ContextModuleFactoryAfterResolveData;
    static __to_binding(data: ContextModuleFactoryAfterResolveData): JsContextModuleFactoryAfterResolveData;
    private constructor();
}
export type ContextModuleFactoryAfterResolveResult = false | ContextModuleFactoryAfterResolveData;
export declare class Module {
    #private;
    context?: Readonly<string>;
    resource?: Readonly<string>;
    request?: Readonly<string>;
    userRequest?: Readonly<string>;
    rawRequest?: Readonly<string>;
    type: string;
    layer: null | string;
    factoryMeta?: Readonly<JsFactoryMeta>;
    /**
     * Records the dynamically added fields for Module on the JavaScript side.
     * These fields are generally used within a plugin, so they do not need to be passed back to the Rust side.
     * @see {@link Compilation#customModules}
     */
    buildInfo: Record<string, any>;
    /**
     * Records the dynamically added fields for Module on the JavaScript side.
     * These fields are generally used within a plugin, so they do not need to be passed back to the Rust side.
     * @see {@link Compilation#customModules}
     */
    buildMeta: Record<string, any>;
    static __from_binding(module: JsModule | ModuleDTO, compilation?: Compilation): Module;
    constructor(module: JsModule | ModuleDTO, compilation?: Compilation);
    originalSource(): Source | null;
    identifier(): string;
    nameForCondition(): string | null;
    get blocks(): DependenciesBlock[];
    size(type?: string): number;
}
export declare class CodeGenerationResult {
    #private;
    constructor(result: JsCodegenerationResult);
    get(sourceType: string): string;
}
export declare class CodeGenerationResults {
}
