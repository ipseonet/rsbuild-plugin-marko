"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _DependenciesBlock_binding;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DependenciesBlock = void 0;
const Dependency_1 = require("./Dependency");
class DependenciesBlock {
    constructor(binding) {
        _DependenciesBlock_binding.set(this, void 0);
        __classPrivateFieldSet(this, _DependenciesBlock_binding, binding, "f");
    }
    get dependencies() {
        return __classPrivateFieldGet(this, _DependenciesBlock_binding, "f").dependencies.map(d => Dependency_1.Dependency.__from_binding(d));
    }
    get blocks() {
        return __classPrivateFieldGet(this, _DependenciesBlock_binding, "f").blocks.map(b => new DependenciesBlock(b));
    }
}
exports.DependenciesBlock = DependenciesBlock;
_DependenciesBlock_binding = new WeakMap();
