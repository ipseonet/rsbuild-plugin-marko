"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LazyCompilationPlugin = void 0;
const backend_1 = __importStar(require("./backend"));
const lazyCompilation_1 = require("./lazyCompilation");
class LazyCompilationPlugin {
    constructor(cacheable, entries, imports, test, backend) {
        this.cacheable = cacheable;
        this.entries = entries;
        this.imports = imports;
        this.test = test;
        this.backend = backend;
    }
    apply(compiler) {
        const backend = (0, backend_1.default)({
            ...this.backend,
            client: require.resolve(`../../../hot/lazy-compilation-${compiler.options.externalsPresets.node ? "node" : "web"}.js`)
        });
        new lazyCompilation_1.BuiltinLazyCompilationPlugin(backend_1.moduleImpl, this.cacheable, this.entries, this.imports, this.test).apply(compiler);
        let initialized = false;
        compiler.hooks.beforeCompile.tapAsync("LazyCompilationPlugin", (_params, callback) => {
            if (initialized)
                return callback();
            backend(compiler, (err, result) => {
                if (err)
                    return callback(err);
                initialized = true;
                callback();
            });
        });
        compiler.hooks.shutdown.tapAsync("LazyCompilationPlugin", callback => {
            (0, backend_1.dispose)(callback);
        });
    }
}
exports.default = LazyCompilationPlugin;
exports.LazyCompilationPlugin = LazyCompilationPlugin;
