/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import type { IncomingMessage, ServerOptions as ServerOptionsImport, ServerResponse } from "node:http";
import type { ListenOptions, Server } from "node:net";
import type { SecureContextOptions, TlsOptions } from "node:tls";
import type { Compiler } from "../..";
export interface LazyCompilationDefaultBackendOptions {
    /**
     * A custom client.
     */
    client?: string;
    /**
     * Specifies where to listen to from the server.
     */
    listen?: number | ListenOptions | ((server: Server) => void);
    /**
     * Specifies the protocol the client should use to connect to the server.
     */
    protocol?: "http" | "https";
    /**
     * Specifies how to create the server handling the EventSource requests.
     */
    server?: ServerOptionsImport<typeof IncomingMessage> | ServerOptionsHttps<typeof IncomingMessage, typeof ServerResponse> | (() => Server);
}
export type ServerOptionsHttps<Request extends typeof IncomingMessage = typeof IncomingMessage, Response extends typeof ServerResponse = typeof ServerResponse> = SecureContextOptions & TlsOptions & ServerOptionsImport<Request, Response>;
declare const getBackend: (options: Omit<LazyCompilationDefaultBackendOptions, "client"> & {
    client: NonNullable<LazyCompilationDefaultBackendOptions["client"]>;
}) => (compiler: Compiler, callback: (err: any, obj?: {
    dispose: (callback: (err: any) => void) => void;
    module: (args: {
        module: string;
        path: string;
    }) => {
        data: string;
        client: string;
        active: boolean;
    };
} | undefined) => void) => void;
export default getBackend;
export declare function dispose(callback: any): void;
export declare function moduleImpl(args: {
    module: string;
    path: string;
}): {
    active: boolean;
    data: string;
    client: string;
};
