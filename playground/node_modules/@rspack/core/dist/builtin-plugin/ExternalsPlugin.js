"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExternalsPlugin = void 0;
const binding_1 = require("@rspack/binding");
const base_1 = require("./base");
exports.ExternalsPlugin = (0, base_1.create)(binding_1.BuiltinPluginName.ExternalsPlugin, (type, externals) => {
    return {
        type,
        externals: (Array.isArray(externals) ? externals : [externals])
            .filter(Boolean)
            .map(getRawExternalItem)
    };
});
function getRawExternalItem(item) {
    if (typeof item === "string" || item instanceof RegExp) {
        return item;
    }
    if (typeof item === "function") {
        return async (ctx) => {
            return await new Promise((resolve, reject) => {
                const promise = item(ctx, (err, result, type) => {
                    if (err)
                        reject(err);
                    resolve({
                        result: getRawExternalItemValueFormFnResult(result),
                        externalType: type
                    });
                });
                if (promise?.then) {
                    promise.then(result => resolve({
                        result: getRawExternalItemValueFormFnResult(result),
                        externalType: undefined
                    }), e => reject(e));
                }
            });
        };
    }
    if (typeof item === "object") {
        return Object.fromEntries(Object.entries(item).map(([k, v]) => [k, getRawExternalItemValue(v)]));
    }
    throw new TypeError(`Unexpected type of external item: ${typeof item}`);
}
function getRawExternalItemValueFormFnResult(result) {
    return result === undefined ? result : getRawExternalItemValue(result);
}
function getRawExternalItemValue(value) {
    if (value && typeof value === "object" && !Array.isArray(value)) {
        return Object.fromEntries(Object.entries(value).map(([k, v]) => [k, Array.isArray(v) ? v : [v]]));
    }
    return value;
}
