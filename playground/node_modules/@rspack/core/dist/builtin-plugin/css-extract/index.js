"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CssExtractRspackPlugin = void 0;
const binding_1 = require("@rspack/binding");
const loader_1 = require("./loader");
__exportStar(require("./loader"), exports);
const DEFAULT_FILENAME = "[name].css";
const LOADER_PATH = require.resolve("./loader");
class CssExtractRspackPlugin {
    constructor(options) {
        this.options = options || {};
    }
    apply(compiler) {
        const { splitChunks } = compiler.options.optimization;
        if (splitChunks) {
            if (
            /** @type {string[]} */ splitChunks.defaultSizeTypes.includes("...")) {
                /** @type {string[]} */
                splitChunks.defaultSizeTypes.push(loader_1.MODULE_TYPE);
            }
        }
        if (compiler.options.output.pathinfo &&
            this.options.pathinfo === undefined) {
            this.options.pathinfo = true;
        }
        compiler.__internal__registerBuiltinPlugin({
            name: binding_1.BuiltinPluginName.CssExtractRspackPlugin,
            options: this.normalizeOptions(this.options)
        });
    }
    normalizeOptions(options) {
        let chunkFilename = options.chunkFilename;
        if (!chunkFilename) {
            const filename = options.filename || DEFAULT_FILENAME;
            if (typeof filename !== "function") {
                const hasName = /** @type {string} */ filename.includes("[name]");
                const hasId = /** @type {string} */ filename.includes("[id]");
                const hasChunkHash = 
                /** @type {string} */
                filename.includes("[chunkhash]");
                const hasContentHash = 
                /** @type {string} */
                filename.includes("[contenthash]");
                // Anything changing depending on chunk is fine
                if (hasChunkHash || hasContentHash || hasName || hasId) {
                    chunkFilename = filename;
                }
                else {
                    // Otherwise prefix "[id]." in front of the basename to make it changing
                    chunkFilename =
                        /** @type {string} */
                        filename.replace(/(^|\/)([^/]*(?:\?|$))/, "$1[id].$2");
                }
            }
            else {
                chunkFilename = "[id].css";
            }
        }
        const normalzedOptions = {
            filename: options.filename || DEFAULT_FILENAME,
            chunkFilename: chunkFilename,
            ignoreOrder: options.ignoreOrder ?? false,
            runtime: options.runtime ?? true,
            insert: typeof options.insert === "function"
                ? options.insert.toString()
                : JSON.stringify(options.insert),
            linkType: typeof options.linkType === "undefined"
                ? JSON.stringify("text/css")
                : options.linkType === false
                    ? undefined
                    : JSON.stringify(options.linkType),
            attributes: options.attributes
                ? Reflect.ownKeys(options.attributes)
                    .map(k => [
                    JSON.stringify(k),
                    JSON.stringify(options.attributes[k])
                ])
                    .reduce((obj, [k, v]) => {
                    obj[k] = v;
                    return obj;
                }, {})
                : {},
            pathinfo: options.pathinfo ?? false
        };
        return normalzedOptions;
    }
}
CssExtractRspackPlugin.pluginName = "css-extract-rspack-plugin";
CssExtractRspackPlugin.loader = LOADER_PATH;
exports.CssExtractRspackPlugin = CssExtractRspackPlugin;
exports.default = CssExtractRspackPlugin;
