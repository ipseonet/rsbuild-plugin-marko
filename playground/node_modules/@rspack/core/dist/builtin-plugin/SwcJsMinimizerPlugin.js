"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwcJsMinimizerRspackPlugin = void 0;
const binding_1 = require("@rspack/binding");
const base_1 = require("./base");
function isObject(value) {
    const type = typeof value;
    return value != null && (type === "object" || type === "function");
}
function getRawExtractCommentsOptions(extractComments) {
    const conditionStr = (condition) => {
        if (typeof condition === "undefined" || condition === true) {
            // copied from terser-webpack-plugin
            return "@preserve|@lic|@cc_on|^\\**!";
        }
        if (condition === false) {
            throw Error("unreachable");
        }
        // FIXME: flags
        return condition.source;
    };
    if (typeof extractComments === "boolean") {
        if (!extractComments) {
            return undefined;
        }
        const res = {
            condition: conditionStr(extractComments)
        };
        return res;
    }
    if (extractComments instanceof RegExp) {
        const res = {
            condition: extractComments.source
        };
        return res;
    }
    if (isObject(extractComments)) {
        if (extractComments.condition === false) {
            return undefined;
        }
        const res = {
            condition: conditionStr(extractComments.condition),
            banner: extractComments.banner
        };
        return res;
    }
    return undefined;
}
exports.SwcJsMinimizerRspackPlugin = (0, base_1.create)(binding_1.BuiltinPluginName.SwcJsMinimizerRspackPlugin, (options) => {
    let compress = options?.minimizerOptions?.compress ?? true;
    const mangle = options?.minimizerOptions?.mangle ?? true;
    const format = {
        comments: false,
        ...options?.minimizerOptions?.format
    };
    if (compress && typeof compress === "object") {
        compress = {
            passes: 1,
            ...compress
        };
    }
    else if (compress) {
        compress = {
            passes: 1
        };
    }
    return {
        test: options?.test,
        include: options?.include,
        exclude: options?.exclude,
        extractComments: getRawExtractCommentsOptions(options?.extractComments),
        minimizerOptions: {
            compress,
            mangle,
            format,
            minify: options?.minimizerOptions?.minify,
            module: options?.minimizerOptions?.module
        }
    };
}, "compilation");
