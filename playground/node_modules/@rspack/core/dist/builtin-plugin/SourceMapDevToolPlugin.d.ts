import { BuiltinPluginName, type RawSourceMapDevToolPluginOptions } from "@rspack/binding";
/**
 * Include source maps for modules based on their extension (defaults to .js and .css).
 */
type Rules = Rule[] | Rule;
/**
 * Include source maps for modules based on their extension (defaults to .js and .css).
 */
type Rule = RegExp | string;
export interface SourceMapDevToolPluginOptions extends Omit<RawSourceMapDevToolPluginOptions, "test" | "include" | "exclude"> {
    exclude?: Rules;
    include?: Rules;
    test?: Rules;
}
export declare const SourceMapDevToolPlugin: {
    new (options: SourceMapDevToolPluginOptions): {
        name: BuiltinPluginName;
        _args: [options: SourceMapDevToolPluginOptions];
        affectedHooks: "done" | "make" | "compile" | "emit" | "afterEmit" | "invalid" | "thisCompilation" | "afterDone" | "compilation" | "normalModuleFactory" | "contextModuleFactory" | "initialize" | "shouldEmit" | "infrastructureLog" | "beforeRun" | "run" | "assetEmitted" | "failed" | "shutdown" | "watchRun" | "watchClose" | "environment" | "afterEnvironment" | "afterPlugins" | "afterResolvers" | "beforeCompile" | "afterCompile" | "finishMake" | "entryOption" | undefined;
        raw(compiler: import("../Compiler").Compiler): import("@rspack/binding").BuiltinPlugin;
        apply(compiler: import("../Compiler").Compiler): void;
    };
};
export {};
