"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JavascriptModulesPlugin = void 0;
const binding_1 = require("@rspack/binding");
const liteTapable = __importStar(require("@rspack/lite-tapable"));
const Compilation_1 = require("../Compilation");
const base_1 = require("./base");
const compilationHooksMap = new WeakMap();
class JavascriptModulesPlugin extends base_1.RspackBuiltinPlugin {
    constructor() {
        super(...arguments);
        this.name = binding_1.BuiltinPluginName.JavascriptModulesPlugin;
        this.affectedHooks = "compilation";
    }
    raw() {
        return (0, base_1.createBuiltinPlugin)(this.name, undefined);
    }
    static getCompilationHooks(compilation) {
        if (!(compilation instanceof Compilation_1.Compilation)) {
            throw new TypeError("The 'compilation' argument must be an instance of Compilation");
        }
        let hooks = compilationHooksMap.get(compilation);
        if (hooks === undefined) {
            hooks = {
                chunkHash: new liteTapable.SyncHook(["chunk", "hash"])
            };
            compilationHooksMap.set(compilation, hooks);
        }
        return hooks;
    }
}
exports.JavascriptModulesPlugin = JavascriptModulesPlugin;
