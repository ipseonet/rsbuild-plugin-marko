"use strict";
/**
 * The following code is from
 * https://github.com/webpack/loader-runner
 *
 * MIT Licensed
 * Author Tobias Koppers @sokra
 * Copyright (c) JS Foundation and other contributors
 * https://github.com/webpack/loader-runner/blob/main/LICENSE
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const LoaderLoadingError_1 = __importDefault(require("./LoaderLoadingError"));
let url = undefined;
function loadLoader(loader, callback) {
    if (loader.type === "module") {
        try {
            if (url === undefined)
                url = require("node:url");
            const loaderUrl = url.pathToFileURL(loader.path);
            const modulePromise = import(loaderUrl.toString());
            modulePromise.then((module) => {
                handleResult(loader, module, callback);
            }, callback);
            return;
        }
        catch (e) {
            callback(e);
        }
    }
    else {
        let module;
        try {
            module = require(loader.path);
        }
        catch (e) {
            // it is possible for node to choke on a require if the FD descriptor
            // limit has been reached. give it a chance to recover.
            if (e instanceof Error &&
                e.code === "EMFILE") {
                const retry = loadLoader.bind(null, loader, callback);
                return void setImmediate(retry);
            }
            return callback(e);
        }
        return handleResult(loader, module, callback);
    }
}
exports.default = loadLoader;
function handleResult(loader, module, callback) {
    if (typeof module !== "function" && typeof module !== "object") {
        return callback(new LoaderLoadingError_1.default(`Module '${loader.path}' is not a loader (export function or es6 module)`));
    }
    loader.normal = typeof module === "function" ? module : module.default;
    loader.pitch = module.pitch;
    loader.raw = module.raw;
    if (typeof loader.normal !== "function" &&
        typeof loader.pitch !== "function") {
        return callback(new LoaderLoadingError_1.default(`Module '${loader.path}' is not a loader (must have normal or pitch function)`));
    }
    callback();
}
