"use strict";
/**
 * The following code is modified based on
 * https://github.com/webpack/webpack/blob/4b4ca3b/lib/MultiWatching.js
 *
 * MIT Licensed
 * Author Tobias Koppers @sokra
 * Copyright (c) JS Foundation and other contributors
 * https://github.com/webpack/webpack/blob/main/LICENSE
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const neo_async_1 = __importDefault(require("../compiled/neo-async"));
class MultiWatching {
    /**
     * @param watchings - child compilers' watchers
     * @param compiler - the compiler
     */
    constructor(watchings, compiler) {
        this.watchings = watchings;
        this.compiler = compiler;
    }
    invalidate(callback) {
        if (callback) {
            neo_async_1.default.each(this.watchings, (watching, callback) => watching.invalidate(callback), 
            // cannot be resolved without assertion
            // Type 'Error | null | undefined' is not assignable to type 'Error | null'
            callback);
        }
        else {
            for (const watching of this.watchings) {
                watching.invalidate();
            }
        }
    }
    close(callback) {
        neo_async_1.default.forEach(this.watchings, (watching, finishedCallback) => {
            watching.close(finishedCallback);
        }, err => {
            this.compiler.hooks.watchClose.call();
            if (typeof callback === "function") {
                this.compiler.running = false;
                // cannot be resolved without assertion
                // Type 'Error | null | undefined' is not assignable to type 'Error | null'
                callback(err);
            }
        });
    }
    suspend() {
        for (const watching of this.watchings) {
            watching.suspend();
        }
    }
    resume() {
        for (const watching of this.watchings) {
            watching.resume();
        }
    }
}
exports.default = MultiWatching;
