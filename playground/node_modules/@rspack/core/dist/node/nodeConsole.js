"use strict";
/**
 * The following code is modified based on
 * https://github.com/webpack/webpack/blob/4b4ca3b/lib/node/nodeConsole.js
 *
 * MIT Licensed
 * Author Tobias Koppers @sokra
 * Copyright (c) JS Foundation and other contributors
 * https://github.com/webpack/webpack/blob/main/LICENSE
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const util = __importStar(require("node:util"));
const truncateArgs_1 = require("../logging/truncateArgs");
function default_1({ colors, appendOnly, stream }) {
    let currentStatusMessage = undefined;
    let hasStatusMessage = false;
    let currentIndent = "";
    let currentCollapsed = 0;
    const indent = (str, prefix, colorPrefix, colorSuffix) => {
        if (str === "")
            return str;
        const prefixWithIndent = currentIndent + prefix;
        if (colors) {
            return (prefixWithIndent +
                colorPrefix +
                str.replace(/\n/g, `${colorSuffix}\n${prefix}${colorPrefix}`) +
                colorSuffix);
        }
        return prefixWithIndent + str.replace(/\n/g, `\n${prefix}`);
    };
    const clearStatusMessage = () => {
        if (hasStatusMessage) {
            stream.write("\x1b[2K\r");
            hasStatusMessage = false;
        }
    };
    const writeStatusMessage = () => {
        if (!currentStatusMessage)
            return;
        // cannot be resolved without assertion, copy from webpack
        // Property 'columns' does not exist on type 'WritableStream'.ts(2339)
        const l = stream.columns;
        const args = l
            ? (0, truncateArgs_1.truncateArgs)(currentStatusMessage, l - 1)
            : currentStatusMessage;
        const str = args.join(" ");
        const coloredStr = `\u001b[1m${str}\u001b[39m\u001b[22m`;
        stream.write(`\x1b[2K\r${coloredStr}`);
        hasStatusMessage = true;
    };
    const writeColored = (prefix, colorPrefix, colorSuffix) => {
        return (...args) => {
            if (currentCollapsed > 0)
                return;
            clearStatusMessage();
            const str = indent(util.format(...args), prefix, colorPrefix, colorSuffix);
            stream.write(`${str}\n`);
            writeStatusMessage();
        };
    };
    const writeGroupMessage = writeColored("<-> ", "\u001b[1m\u001b[36m", "\u001b[39m\u001b[22m");
    const writeGroupCollapsedMessage = writeColored("<+> ", "\u001b[1m\u001b[36m", "\u001b[39m\u001b[22m");
    return {
        log: writeColored("    ", "\u001b[1m", "\u001b[22m"),
        debug: writeColored("    ", "", ""),
        trace: writeColored("    ", "", ""),
        info: writeColored("<i> ", "\u001b[1m\u001b[32m", "\u001b[39m\u001b[22m"),
        warn: writeColored("<w> ", "\u001b[1m\u001b[33m", "\u001b[39m\u001b[22m"),
        error: writeColored("<e> ", "\u001b[1m\u001b[31m", "\u001b[39m\u001b[22m"),
        logTime: writeColored("<t> ", "\u001b[1m\u001b[35m", "\u001b[39m\u001b[22m"),
        group: (...args) => {
            writeGroupMessage(...args);
            if (currentCollapsed > 0) {
                currentCollapsed++;
            }
            else {
                currentIndent += "  ";
            }
        },
        groupCollapsed: (...args) => {
            writeGroupCollapsedMessage(...args);
            currentCollapsed++;
        },
        groupEnd: () => {
            if (currentCollapsed > 0)
                currentCollapsed--;
            else if (currentIndent.length >= 2)
                currentIndent = currentIndent.slice(0, currentIndent.length - 2);
        },
        profile: console.profile && (name => console.profile(name)),
        profileEnd: console.profileEnd && (name => console.profileEnd(name)),
        clear: (!appendOnly &&
            console.clear &&
            (() => {
                clearStatusMessage();
                console.clear();
                writeStatusMessage();
            })),
        status: appendOnly
            ? writeColored("<s> ", "", "")
            : (name, ...argsWithEmpty) => {
                const args = argsWithEmpty.filter(Boolean);
                if (name === undefined && args.length === 0) {
                    clearStatusMessage();
                    currentStatusMessage = undefined;
                }
                else if (typeof name === "string" &&
                    name.startsWith("[webpack.Progress] ")) {
                    currentStatusMessage = [name.slice(19), ...args];
                    writeStatusMessage();
                }
                else if (name === "[webpack.Progress]") {
                    currentStatusMessage = [...args];
                    writeStatusMessage();
                }
                else {
                    currentStatusMessage = [name, ...args];
                    writeStatusMessage();
                }
            }
    };
}
exports.default = default_1;
