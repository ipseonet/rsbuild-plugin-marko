"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_vm_1 = __importDefault(require("node:vm"));
const _1 = require(".");
class ExecuteModulePlugin {
    apply(compiler) {
        compiler.hooks.compilation.tap("executeModule", compilation => {
            compilation.hooks.executeModule.tap("executeModule", (options, context) => {
                const moduleObject = options.moduleObject;
                const source = options.codeGenerationResult.get("javascript");
                try {
                    const fn = node_vm_1.default.runInThisContext(`(function(module, __webpack_module__, __webpack_exports__, exports, ${_1.RuntimeGlobals.require}) {\n${source}\n})`, {
                        filename: moduleObject.id
                    });
                    fn.call(moduleObject.exports, moduleObject, moduleObject, moduleObject.exports, moduleObject.exports, context.__webpack_require__);
                }
                catch (e) {
                    const err = e instanceof Error ? e : new Error(e);
                    err.stack += printGeneratedCodeForStack(moduleObject.id, source);
                    throw err;
                }
            });
        });
    }
}
exports.default = ExecuteModulePlugin;
const printGeneratedCodeForStack = (moduleId, code) => {
    const lines = code.split("\n");
    const n = `${lines.length}`.length;
    return `\n\nGenerated code for ${moduleId}\n${lines
        .map(
    /**
     * @param {string} line the line
     * @param {number} i the index
     * @param {string[]} lines the lines
     * @returns {string} the line with line number
     */
    (line, i, lines) => {
        const iStr = `${i + 1}`;
        return `${" ".repeat(n - iStr.length)}${iStr} | ${line}`;
    })
        .join("\n")}`;
};
