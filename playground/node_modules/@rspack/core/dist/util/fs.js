"use strict";
/**
 * The following code is modified based on
 * https://github.com/webpack/webpack/blob/4b4ca3b/lib/util/fs.js
 *
 * MIT Licensed
 * Author Tobias Koppers @sokra
 * Copyright (c) JS Foundation and other contributors
 * https://github.com/webpack/webpack/blob/main/LICENSE
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mkdirp = exports.rmrf = void 0;
const node_assert_1 = __importDefault(require("node:assert"));
const node_path_1 = __importDefault(require("node:path"));
function rmrf(fs, p, callback) {
    fs.stat(p, (err, stats) => {
        if (err) {
            if (err.code === "ENOENT") {
                return callback();
            }
            return callback(err);
        }
        if (stats.isDirectory()) {
            fs.readdir(p, (err, files) => {
                if (err) {
                    return callback(err);
                }
                let count = files.length;
                if (count === 0) {
                    fs.rmdir(p, callback);
                }
                else {
                    for (const file of files) {
                        (0, node_assert_1.default)(typeof file === "string");
                        const fullPath = join(fs, p, file);
                        rmrf(fs, fullPath, err => {
                            if (err) {
                                return callback(err);
                            }
                            count--;
                            if (count === 0) {
                                fs.rmdir(p, callback);
                            }
                        });
                    }
                }
            });
        }
        else {
            fs.unlink(p, callback);
        }
    });
}
exports.rmrf = rmrf;
const join = (fs, rootPath, filename) => {
    if (fs?.join) {
        return fs.join(rootPath, filename);
    }
    if (node_path_1.default.posix.isAbsolute(rootPath)) {
        return node_path_1.default.posix.join(rootPath, filename);
    }
    if (node_path_1.default.win32.isAbsolute(rootPath)) {
        return node_path_1.default.win32.join(rootPath, filename);
    }
    throw new Error(`${rootPath} is neither a posix nor a windows path, and there is no 'join' method defined in the file system`);
};
const dirname = (fs, absPath) => {
    if (fs?.dirname) {
        return fs.dirname(absPath);
    }
    if (node_path_1.default.posix.isAbsolute(absPath)) {
        return node_path_1.default.posix.dirname(absPath);
    }
    if (node_path_1.default.win32.isAbsolute(absPath)) {
        return node_path_1.default.win32.dirname(absPath);
    }
    throw new Error(`${absPath} is neither a posix nor a windows path, and there is no 'dirname' method defined in the file system`);
};
const mkdirp = (fs, p, callback) => {
    fs.mkdir(p, err => {
        if (err) {
            if (err.code === "ENOENT") {
                const dir = dirname(fs, p);
                if (dir === p) {
                    callback(err);
                    return;
                }
                (0, exports.mkdirp)(fs, dir, err => {
                    if (err) {
                        callback(err);
                        return;
                    }
                    fs.mkdir(p, err => {
                        if (err) {
                            if (err.code === "EEXIST") {
                                callback();
                                return;
                            }
                            callback(err);
                            return;
                        }
                        callback();
                    });
                });
                return;
            }
            if (err.code === "EEXIST") {
                callback();
                return;
            }
            callback(err);
            return;
        }
        callback();
    });
};
exports.mkdirp = mkdirp;
