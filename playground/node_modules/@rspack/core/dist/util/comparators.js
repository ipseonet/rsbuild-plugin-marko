"use strict";
/**
 * The following code is modified based on
 * https://github.com/webpack/webpack/tree/4b4ca3bb53f36a5b8fc6bc1bd976ed7af161bd80/lib/util
 *
 * MIT Licensed
 * Author Tobias Koppers @sokra
 * Copyright (c) JS Foundation and other contributors
 * https://github.com/webpack/webpack/blob/main/LICENSE
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.compareNumbers = exports.compareSelect = exports.compareChunkGroupsByIndex = exports.compareChunksById = exports.compareIds = exports.concatComparators = void 0;
class TwoKeyWeakMap {
    constructor() {
        this._map = new WeakMap();
    }
    get(key1, key2) {
        const childMap = this._map.get(key1);
        if (childMap === undefined) {
            return undefined;
        }
        return childMap.get(key2);
    }
    set(key1, key2, value) {
        let childMap = this._map.get(key1);
        if (childMap === undefined) {
            childMap = new WeakMap();
            this._map.set(key1, childMap);
        }
        childMap.set(key2, value);
    }
}
const concatComparatorsCache = new TwoKeyWeakMap();
const concatComparators = (...comps) => {
    const [c1, c2, ...cRest] = comps;
    if (c2 === undefined) {
        return c1;
    }
    if (cRest.length > 0) {
        const [c3, ...cRest2] = cRest;
        return (0, exports.concatComparators)(c1, (0, exports.concatComparators)(c2, c3, ...cRest2));
    }
    const cacheEntry = concatComparatorsCache.get(c1, c2);
    if (cacheEntry !== undefined)
        return cacheEntry;
    const result = (a, b) => {
        const res = c1(a, b);
        if (res !== 0)
            return res;
        return c2(a, b);
    };
    concatComparatorsCache.set(c1, c2, result);
    return result;
};
exports.concatComparators = concatComparators;
const compareIds = (a, b) => {
    if (typeof a !== typeof b) {
        return typeof a < typeof b ? -1 : 1;
    }
    if (a < b)
        return -1;
    if (a > b)
        return 1;
    return 0;
};
exports.compareIds = compareIds;
const compareChunksById = (a, b) => {
    return (0, exports.compareIds)(a.id || "", b.id || "");
};
exports.compareChunksById = compareChunksById;
const compareChunkGroupsByIndex = (a, b) => {
    return a.index < b.index ? -1 : 1;
};
exports.compareChunkGroupsByIndex = compareChunkGroupsByIndex;
const compareSelectCache = new TwoKeyWeakMap();
const compareSelect = (getter, comparator) => {
    const cacheEntry = compareSelectCache.get(getter, comparator);
    if (cacheEntry !== undefined)
        return cacheEntry;
    const result = (a, b) => {
        const aValue = getter(a);
        const bValue = getter(b);
        if (aValue !== undefined && aValue !== null) {
            if (bValue !== undefined && bValue !== null) {
                return comparator(aValue, bValue);
            }
            return -1;
        }
        if (bValue !== undefined && bValue !== null) {
            return 1;
        }
        return 0;
    };
    compareSelectCache.set(getter, comparator, result);
    return result;
};
exports.compareSelect = compareSelect;
const compareNumbers = (a, b) => {
    if (typeof a !== typeof b) {
        return typeof a < typeof b ? -1 : 1;
    }
    if (a < b)
        return -1;
    if (a > b)
        return 1;
    return 0;
};
exports.compareNumbers = compareNumbers;
