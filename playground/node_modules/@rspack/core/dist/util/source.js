"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsSource = void 0;
const webpack_sources_1 = require("../../compiled/webpack-sources");
class JsSource extends webpack_sources_1.Source {
    static __from_binding(source) {
        if (source.source instanceof Buffer) {
            // @ts-expect-error: webpack-sources can accept buffer as source,
            // see: https://github.com/webpack/webpack-sources/blob/9f98066311d53a153fdc7c633422a1d086528027/lib/RawSource.js#L12
            return new webpack_sources_1.RawSource(source.source);
        }
        if (!source.map) {
            return new webpack_sources_1.RawSource(source.source);
        }
        return new webpack_sources_1.SourceMapSource(source.source, "inmemory://from rust", 
        // @ts-expect-error: SourceMapSource can accept string as source map,
        // see: https://github.com/webpack/webpack-sources/blob/9f98066311d53a153fdc7c633422a1d086528027/lib/SourceMapSource.js#L30
        source.map);
    }
    static __to_binding(source) {
        if (source instanceof webpack_sources_1.RawSource) {
            // @ts-expect-error: The 'isBuffer' method exists on 'RawSource' in 'webpack-sources',
            if (source.isBuffer()) {
                return {
                    source: source.buffer()
                };
            }
            return {
                source: source.source()
            };
        }
        const map = JSON.stringify(source.map?.({
            columns: true
        }));
        const code = source.source();
        return {
            source: typeof code === "string" ? code : Buffer.from(code).toString("utf-8"),
            map
        };
    }
}
exports.JsSource = JsSource;
