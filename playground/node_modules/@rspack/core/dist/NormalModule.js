"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NormalModule = void 0;
const node_util_1 = __importDefault(require("node:util"));
const liteTapable = __importStar(require("@rspack/lite-tapable"));
const Compilation_1 = require("./Compilation");
const compilationHooksMap = new WeakMap();
const createFakeHook = (fakeHook, message, code) => {
    return Object.freeze(Object.assign(message && code
        ? deprecateAllProperties(fakeHook, message, code)
        : fakeHook, { _fakeHook: true }));
};
const deprecateAllProperties = (obj, message, code) => {
    const newObj = {};
    const descriptors = Object.getOwnPropertyDescriptors(obj);
    for (const name of Object.keys(descriptors)) {
        const descriptor = descriptors[name];
        if (typeof descriptor.value === "function") {
            Object.defineProperty(newObj, name, {
                ...descriptor,
                value: node_util_1.default.deprecate(descriptor.value, message, code)
            });
        }
        else if (descriptor.get || descriptor.set) {
            Object.defineProperty(newObj, name, {
                ...descriptor,
                get: descriptor.get && node_util_1.default.deprecate(descriptor.get, message, code),
                set: descriptor.set && node_util_1.default.deprecate(descriptor.set, message, code)
            });
        }
        else {
            let value = descriptor.value;
            Object.defineProperty(newObj, name, {
                configurable: descriptor.configurable,
                enumerable: descriptor.enumerable,
                get: node_util_1.default.deprecate(() => value, message, code),
                set: descriptor.writable
                    ? node_util_1.default.deprecate((v) => (value = v), message, code)
                    : undefined
            });
        }
    }
    return newObj;
};
class NormalModule {
    static getCompilationHooks(compilation) {
        if (!(compilation instanceof Compilation_1.Compilation)) {
            throw new TypeError("The 'compilation' argument must be an instance of Compilation");
        }
        let hooks = compilationHooksMap.get(compilation);
        if (hooks === undefined) {
            hooks = {
                loader: new liteTapable.SyncHook(["loaderContext", "module"]),
                // TODO webpack 6 deprecate
                readResourceForScheme: new liteTapable.HookMap(scheme => {
                    const hook = hooks.readResource.for(scheme);
                    return createFakeHook({
                        tap: (options, fn) => hook.tap(options, (loaderContext) => fn(loaderContext.resource)),
                        tapAsync: (options, fn) => hook.tapAsync(options, (loaderContext, callback) => fn(loaderContext.resource, callback)),
                        tapPromise: (options, fn) => hook.tapPromise(options, (loaderContext) => fn(loaderContext.resource))
                    });
                }),
                readResource: new liteTapable.HookMap(() => new liteTapable.AsyncSeriesBailHook(["loaderContext"]))
            };
            compilationHooksMap.set(compilation, hooks);
        }
        return hooks;
    }
}
exports.NormalModule = NormalModule;
exports.default = NormalModule;
