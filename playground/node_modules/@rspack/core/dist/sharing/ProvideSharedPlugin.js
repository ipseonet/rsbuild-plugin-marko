"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProvideSharedPlugin = void 0;
const binding_1 = require("@rspack/binding");
const base_1 = require("../builtin-plugin/base");
const options_1 = require("../container/options");
const ShareRuntimePlugin_1 = require("./ShareRuntimePlugin");
class ProvideSharedPlugin extends base_1.RspackBuiltinPlugin {
    constructor(options) {
        super();
        this.name = binding_1.BuiltinPluginName.ProvideSharedPlugin;
        this._provides = (0, options_1.parseOptions)(options.provides, item => {
            if (Array.isArray(item))
                throw new Error("Unexpected array of provides");
            return {
                shareKey: item,
                version: undefined,
                shareScope: options.shareScope || "default",
                eager: false
            };
        }, item => {
            const raw = {
                shareKey: item.shareKey,
                version: item.version,
                shareScope: item.shareScope || options.shareScope || "default",
                eager: !!item.eager
            };
            if (options.enhanced) {
                const enhancedItem = item;
                return {
                    ...raw,
                    singleton: enhancedItem.singleton,
                    requiredVersion: enhancedItem.requiredVersion,
                    strictVersion: enhancedItem.strictVersion
                };
            }
            return raw;
        });
        this._enhanced = options.enhanced;
    }
    raw(compiler) {
        new ShareRuntimePlugin_1.ShareRuntimePlugin(this._enhanced ?? false).apply(compiler);
        const rawOptions = this._provides.map(([key, v]) => ({
            key,
            ...v
        }));
        return (0, base_1.createBuiltinPlugin)(this.name, rawOptions);
    }
}
exports.ProvideSharedPlugin = ProvideSharedPlugin;
