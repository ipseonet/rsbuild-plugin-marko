"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SharePlugin = void 0;
const options_1 = require("../container/options");
const ConsumeSharedPlugin_1 = require("./ConsumeSharedPlugin");
const ProvideSharedPlugin_1 = require("./ProvideSharedPlugin");
const utils_1 = require("./utils");
class SharePlugin {
    constructor(options) {
        const sharedOptions = (0, options_1.parseOptions)(options.shared, (item, key) => {
            if (typeof item !== "string")
                throw new Error("Unexpected array in shared");
            const config = item === key || !(0, utils_1.isRequiredVersion)(item)
                ? {
                    import: item
                }
                : {
                    import: key,
                    requiredVersion: item
                };
            return config;
        }, item => item);
        const consumes = sharedOptions.map(([key, options]) => ({
            [key]: {
                import: options.import,
                shareKey: options.shareKey || key,
                shareScope: options.shareScope,
                requiredVersion: options.requiredVersion,
                strictVersion: options.strictVersion,
                singleton: options.singleton,
                packageName: options.packageName,
                eager: options.eager
            }
        }));
        const provides = sharedOptions
            .filter(([, options]) => options.import !== false)
            .map(([key, options]) => ({
            [options.import || key]: {
                shareKey: options.shareKey || key,
                shareScope: options.shareScope,
                version: options.version,
                eager: options.eager,
                singleton: options.singleton,
                requiredVersion: options.requiredVersion,
                strictVersion: options.strictVersion
            }
        }));
        this._shareScope = options.shareScope;
        this._consumes = consumes;
        this._provides = provides;
        this._enhanced = options.enhanced ?? false;
    }
    apply(compiler) {
        new ConsumeSharedPlugin_1.ConsumeSharedPlugin({
            shareScope: this._shareScope,
            consumes: this._consumes,
            enhanced: this._enhanced
        }).apply(compiler);
        new ProvideSharedPlugin_1.ProvideSharedPlugin({
            shareScope: this._shareScope,
            provides: this._provides,
            enhanced: this._enhanced
        }).apply(compiler);
    }
}
exports.SharePlugin = SharePlugin;
