"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModuleFederationPluginV1 = void 0;
const config_1 = require("../config");
const SharePlugin_1 = require("../sharing/SharePlugin");
const ShareRuntimePlugin_1 = require("../sharing/ShareRuntimePlugin");
const validate_1 = require("../util/validate");
const ContainerPlugin_1 = require("./ContainerPlugin");
const ContainerReferencePlugin_1 = require("./ContainerReferencePlugin");
class ModuleFederationPluginV1 {
    constructor(_options) {
        this._options = _options;
    }
    apply(compiler) {
        const { _options: options } = this;
        const enhanced = options.enhanced ?? false;
        const library = options.library || { type: "var", name: options.name };
        const remoteType = options.remoteType ||
            (options.library && (0, validate_1.isValidate)(options.library.type, config_1.externalsType)
                ? options.library.type
                : "script");
        if (library &&
            !compiler.options.output.enabledLibraryTypes.includes(library.type)) {
            compiler.options.output.enabledLibraryTypes.push(library.type);
        }
        compiler.hooks.afterPlugins.tap("ModuleFederationPlugin", () => {
            new ShareRuntimePlugin_1.ShareRuntimePlugin(this._options.enhanced).apply(compiler);
            if (options.exposes &&
                (Array.isArray(options.exposes)
                    ? options.exposes.length > 0
                    : Object.keys(options.exposes).length > 0)) {
                new ContainerPlugin_1.ContainerPlugin({
                    name: options.name,
                    library,
                    filename: options.filename,
                    runtime: options.runtime,
                    shareScope: options.shareScope,
                    exposes: options.exposes,
                    enhanced
                }).apply(compiler);
            }
            if (options.remotes &&
                (Array.isArray(options.remotes)
                    ? options.remotes.length > 0
                    : Object.keys(options.remotes).length > 0)) {
                new ContainerReferencePlugin_1.ContainerReferencePlugin({
                    remoteType,
                    shareScope: options.shareScope,
                    remotes: options.remotes,
                    enhanced
                }).apply(compiler);
            }
            if (options.shared) {
                new SharePlugin_1.SharePlugin({
                    shared: options.shared,
                    shareScope: options.shareScope,
                    enhanced
                }).apply(compiler);
            }
        });
    }
}
exports.ModuleFederationPluginV1 = ModuleFederationPluginV1;
