"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContainerPlugin = void 0;
const binding_1 = require("@rspack/binding");
const base_1 = require("../builtin-plugin/base");
const config_1 = require("../config");
const options_1 = require("../container/options");
const ShareRuntimePlugin_1 = require("../sharing/ShareRuntimePlugin");
class ContainerPlugin extends base_1.RspackBuiltinPlugin {
    constructor(options) {
        super();
        this.name = binding_1.BuiltinPluginName.ContainerPlugin;
        this._options = {
            name: options.name,
            shareScope: options.shareScope || "default",
            library: options.library || {
                type: "var",
                name: options.name
            },
            runtime: options.runtime,
            filename: options.filename,
            exposes: (0, options_1.parseOptions)(options.exposes, item => ({
                import: Array.isArray(item) ? item : [item],
                name: undefined
            }), item => ({
                import: Array.isArray(item.import) ? item.import : [item.import],
                name: item.name || undefined
            })),
            enhanced: options.enhanced ?? false
        };
    }
    raw(compiler) {
        const { name, shareScope, library, runtime, filename, exposes, enhanced } = this._options;
        if (!compiler.options.output.enabledLibraryTypes.includes(library.type)) {
            compiler.options.output.enabledLibraryTypes.push(library.type);
        }
        new ShareRuntimePlugin_1.ShareRuntimePlugin(this._options.enhanced).apply(compiler);
        const rawOptions = {
            name,
            shareScope,
            library: (0, config_1.getRawLibrary)(library),
            runtime,
            filename,
            exposes: exposes.map(([key, r]) => ({ key, ...r })),
            enhanced
        };
        return (0, base_1.createBuiltinPlugin)(this.name, rawOptions);
    }
}
exports.ContainerPlugin = ContainerPlugin;
