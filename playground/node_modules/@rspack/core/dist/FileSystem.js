"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThreadsafeWritableNodeFS = void 0;
const node_util_1 = __importDefault(require("node:util"));
const fs_1 = require("./util/fs");
const memoize_1 = require("./util/memoize");
const NOOP_FILESYSTEM = {
    writeFile() { },
    removeFile() { },
    mkdir() { },
    mkdirp() { },
    removeDirAll() { }
};
class ThreadsafeWritableNodeFS {
    constructor(fs) {
        if (!fs) {
            // This happens when located in a child compiler.
            Object.assign(this, NOOP_FILESYSTEM);
            return;
        }
        this.writeFile = (0, memoize_1.memoizeFn)(() => node_util_1.default.promisify(fs.writeFile.bind(fs)));
        this.removeFile = (0, memoize_1.memoizeFn)(() => node_util_1.default.promisify(fs.unlink.bind(fs)));
        this.mkdir = (0, memoize_1.memoizeFn)(() => node_util_1.default.promisify(fs.mkdir.bind(fs)));
        this.mkdirp = (0, memoize_1.memoizeFn)(() => node_util_1.default.promisify(fs_1.mkdirp.bind(null, fs)));
        this.removeDirAll = (0, memoize_1.memoizeFn)(() => node_util_1.default.promisify(fs_1.rmrf.bind(null, fs)));
    }
    static __to_binding(fs) {
        return new this(fs);
    }
}
exports.ThreadsafeWritableNodeFS = ThreadsafeWritableNodeFS;
