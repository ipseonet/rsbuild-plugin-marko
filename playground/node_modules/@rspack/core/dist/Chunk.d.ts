import { type JsChunk, type JsChunkPathData, type JsCompilation } from "@rspack/binding";
import { Compilation } from ".";
import { ChunkGroup } from "./ChunkGroup";
export declare class Chunk {
    #private;
    name?: Readonly<string>;
    id?: Readonly<string>;
    ids: ReadonlyArray<string>;
    idNameHints: ReadonlyArray<string>;
    filenameTemplate?: Readonly<string>;
    cssFilenameTemplate?: Readonly<string>;
    files: ReadonlySet<string>;
    runtime: ReadonlySet<string>;
    hash?: Readonly<string>;
    contentHash: Readonly<Record<string, string>>;
    renderedHash?: Readonly<string>;
    chunkReason?: Readonly<string>;
    auxiliaryFiles: ReadonlySet<string>;
    static __from_binding(chunk: JsChunk, compilation: Compilation): Chunk;
    static __from_binding(chunk: JsChunk, compilation: JsCompilation): Chunk;
    constructor(chunk: JsChunk, compilation: JsCompilation);
    isOnlyInitial(): boolean;
    canBeInitial(): boolean;
    hasRuntime(): boolean;
    get groupsIterable(): Iterable<ChunkGroup>;
    getChunkMaps(realHash: boolean): {
        hash: Record<string | number, string>;
        contentHash: Record<string | number, Record<string, string>>;
        name: Record<string | number, string>;
    };
    getAllAsyncChunks(): Iterable<Chunk>;
    getAllInitialChunks(): Iterable<Chunk>;
    getAllReferencedChunks(): Iterable<Chunk>;
    /**
     * Note: This is not a webpack public API, maybe removed in future.
     *
     * @internal
     */
    __internal__innerUkey(): number;
    __internal_to_path_data_chunk(): JsChunkPathData;
}
