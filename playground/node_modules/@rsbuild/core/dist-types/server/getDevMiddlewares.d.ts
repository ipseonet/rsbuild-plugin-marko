import type { DevConfig, EnvironmentAPI, RequestHandler, Rspack, ServerConfig, SetupMiddlewaresServer } from '../types';
import type { UpgradeEvent } from './helper';
export type CompileMiddlewareAPI = {
    middleware: RequestHandler;
    sockWrite: SetupMiddlewaresServer['sockWrite'];
    onUpgrade: UpgradeEvent;
    close: () => void;
};
export type RsbuildDevMiddlewareOptions = {
    pwd: string;
    dev: DevConfig;
    server: ServerConfig;
    environments: EnvironmentAPI;
    compileMiddlewareAPI?: CompileMiddlewareAPI;
    outputFileSystem: Rspack.OutputFileSystem;
    output: {
        distPath: string;
    };
};
export type Middlewares = Array<RequestHandler | [string, RequestHandler]>;
export declare const getMiddlewares: (options: RsbuildDevMiddlewareOptions) => Promise<{
    close: () => Promise<void>;
    onUpgrade: UpgradeEvent;
    middlewares: Middlewares;
}>;
