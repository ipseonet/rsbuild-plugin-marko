import type { Server } from 'node:http';
import type { Http2SecureServer } from 'node:http2';
import type Connect from '../../compiled/connect';
import type { CreateCompiler, CreateDevServerOptions, EnvironmentAPI, InternalContext, NormalizedConfig } from '../types';
type HTTPServer = Server | Http2SecureServer;
export type RsbuildDevServer = {
    /**
     * Listen the Rsbuild server.
     * Do not call this method if you are using a custom server.
     */
    listen: () => Promise<{
        port: number;
        urls: string[];
        server: {
            close: () => Promise<void>;
        };
    }>;
    /**
     * Environment API of Rsbuild server.
     */
    environments: EnvironmentAPI;
    /**
     * The resolved port.
     * By default, Rsbuild server listens on port `3000` and automatically increments the port number if the port is occupied.
     */
    port: number;
    /**
     * The `connect` app instance.
     * Can be used to attach custom middlewares to the dev server.
     */
    middlewares: Connect.Server;
    /**
     * Notify that the Rsbuild server has been started.
     * Rsbuild will trigger `onAfterStartDevServer` hook in this stage.
     */
    afterListen: () => Promise<void>;
    /**
     * Activate socket connection.
     * This ensures that HMR works properly.
     */
    connectWebSocket: (options: {
        server: HTTPServer;
    }) => void;
    /**
     * Close the Rsbuild server.
     */
    close: () => Promise<void>;
    /**
     * Print the server URLs.
     */
    printUrls: () => void;
    /**
     * Open URL in the browser after starting the server.
     */
    open: () => Promise<void>;
};
export declare function createDevServer<Options extends {
    context: InternalContext;
}>(options: Options, createCompiler: CreateCompiler, config: NormalizedConfig, { compiler: customCompiler, getPortSilently, runCompile, }?: CreateDevServerOptions): Promise<RsbuildDevServer>;
export {};
