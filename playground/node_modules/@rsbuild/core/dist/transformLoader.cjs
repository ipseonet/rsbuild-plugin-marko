"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/loader/transformLoader.ts
var transformLoader_exports = {};
__export(transformLoader_exports, {
  default: () => transform
});
module.exports = __toCommonJS(transformLoader_exports);
async function transform(source, map) {
  const callback = this.async();
  const bypass = () => callback(null, source, map);
  const { id: transformId, getEnvironment } = this.getOptions();
  if (!transformId) {
    return bypass();
  }
  const transform2 = this._compiler?.__rsbuildTransformer?.[transformId];
  if (!transform2) {
    return bypass();
  }
  const result = await transform2({
    code: source,
    resource: this.resource,
    resourcePath: this.resourcePath,
    resourceQuery: this.resourceQuery,
    environment: getEnvironment(),
    addDependency: this.addDependency,
    emitFile: this.emitFile
  });
  if (result === null || result === void 0) {
    return bypass();
  }
  if (typeof result === "string") {
    return callback(null, result, map);
  }
  const useMap = map !== void 0 && map !== null;
  const finalMap = result.map ?? map;
  callback(null, result.code, useMap ? finalMap : void 0);
}
