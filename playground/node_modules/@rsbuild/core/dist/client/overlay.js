// src/client/overlay.ts
import { _ as _define_property } from "@swc/helpers/_/_define_property";
import { registerOverlay } from "./hmr";
function stripAnsi(content) {
  const pattern = [
    "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
    "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"
  ].join("|");
  const regex = new RegExp(pattern, "g");
  return content.replace(regex, "");
}
function linkedText(root, selector, text) {
  const el = root.querySelector(selector);
  const fileRegex = /(?:[a-zA-Z]:\\|\/).*?:\d+:\d+/g;
  let curIndex = 0;
  let match = fileRegex.exec(text);
  while (match !== null) {
    const { 0: file, index } = match;
    if (index != null) {
      const frag2 = text.slice(curIndex, index);
      el.appendChild(document.createTextNode(frag2));
      const link = document.createElement("a");
      link.textContent = file;
      link.className = "file-link";
      link.onclick = () => {
        fetch(`/__open-in-editor?file=${encodeURIComponent(file)}`);
      };
      el.appendChild(link);
      curIndex += frag2.length + file.length;
    }
    match = fileRegex.exec(text);
  }
  const frag = text.slice(curIndex);
  el.appendChild(document.createTextNode(frag));
}
var overlayTemplate = `
<style>
.root {
  position: fixed;
  z-index: 9999;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  overflow-y: scroll;
  margin: 0;
  background: rgba(0, 0, 0, 0.66);
  cursor: pointer;
}
.container {
  font-family: Menlo, Consolas, monospace;
  line-height: 1.6;
  width: 960px;
  max-width: 85%;
  color: #d8d8d8;
  margin: 32px auto;
  padding: 32px 40px;
  position: relative;
  background: #181818;
  border-radius: 24px;
  box-shadow: 0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);
  overflow: hidden;
  direction: ltr;
  text-align: left;
  box-sizing: border-box;
  cursor: default;
}
.title {
  margin: 0 0 20px;
  padding-bottom: 12px;
  font-size: 17px;
  font-weight: 600;
  color: #fc5e5e;
  border-bottom: 2px solid rgba(252,94,94,.66);
}
.content {
  margin: 0;
  font-size: 14px;
  font-family: inherit;
  overflow-x: scroll;
  scrollbar-width: none;
  color: #b8b8b8;
}
.content::-webkit-scrollbar {
  display: none;
}
.file-link {
  cursor: pointer;
  color: #27caca;
  text-decoration: underline;
  &:hover {
    opacity: 0.8;
  }
  &:active {
    opacity: 0.6;
  }
}
.close {
  position: absolute;
  top: 27px;
  right: 32px;
  width: 32px;
  height: 32px;
  cursor: pointer;
}
.close:hover {
  opacity: 0.8;
}
.close:active {
  opacity: 0.6;
}
.close:before,
.close:after {
  position: absolute;
  left: 16px;
  top: 8px;
  content: ' ';
  height: 18px;
  width: 2px;
  border-radius: 4px;
  background-color: #b8b8b8;
}
.close:before {
  transform: rotate(45deg);
}
.close:after {
  transform: rotate(-45deg);
}
.footer {
  font-size: 12px;
  color: #7e6a92;
  margin-top: 20px;
  padding-top: 12px;
  border-top: 2px solid rgba(126,106,146,.6);
}
.footer p {
  margin: 4px 0 0;
}
.footer span {
  color: #a88dc3;
}
</style>

<div class="root">
  <div class="container">
    <div class="close"></div>
    <p class="title">Compilation failed</p>
    <pre class="content"></pre>
    <footer class="footer">
      <p><span>Fix error</span>, click outside, or press Esc to close the overlay.</p>
      <p>Disable overlay by setting Rsbuild's <span>dev.client.overlay</span> config to false.<p>
    </footer>
  </div>
</div>
`;
var { HTMLElement = class {
}, customElements } = typeof window !== "undefined" ? window : globalThis;
var ErrorOverlay = class extends HTMLElement {
  constructor(message) {
    var _root_querySelector;
    super(), _define_property(this, "close", () => {
      const remove = () => {
        var _this_parentNode;
        return (_this_parentNode = this.parentNode) === null || _this_parentNode === void 0 ? void 0 : _this_parentNode.removeChild(this);
      };
      if (this.animate) {
        this.animate([
          {
            opacity: 1
          },
          {
            opacity: 0
          }
        ], {
          duration: 300,
          easing: "ease-out"
        }).addEventListener("finish", remove);
      } else {
        remove();
      }
    });
    if (!this.attachShadow) {
      console.warn("[Rsbuild] Current browser version does not support displaying error overlay");
      return;
    }
    const root = this.attachShadow({
      mode: "open"
    });
    root.innerHTML = overlayTemplate;
    linkedText(root, ".content", stripAnsi(message.join("/n")).trim());
    (_root_querySelector = root.querySelector(".close")) === null || _root_querySelector === void 0 ? void 0 : _root_querySelector.addEventListener("click", this.close);
    this.addEventListener("click", this.close);
    root.querySelector(".container").addEventListener("click", (e) => {
      e.stopPropagation();
    });
    const onEscKeydown = (e) => {
      if (e.key === "Escape" || e.code === "Escape") {
        this.close();
      }
      document.removeEventListener("keydown", onEscKeydown);
    };
    document.addEventListener("keydown", onEscKeydown);
  }
};
var overlayId = "rsbuild-error-overlay";
if (customElements && !customElements.get(overlayId)) {
  customElements.define(overlayId, ErrorOverlay);
}
function createOverlay(err) {
  clearOverlay();
  document.body.appendChild(new ErrorOverlay(err));
}
function clearOverlay() {
  document.querySelectorAll(overlayId).forEach((n) => n.close());
}
if (typeof document !== "undefined") {
  registerOverlay(createOverlay, clearOverlay);
} else {
  console.info("[Rsbuild] Failed to display error overlay as document is not available, you can disable the `dev.client.overlay` option.");
}
